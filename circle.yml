version: 2.0

references:

  install_deps: &install_deps
    run:
      name: Install Packages
      command: |
        sudo apt-get update -qq
        # sudo apt-get install git-lfs
        sudo apt-get install tk-dev pkg-config python-dev python-tk tree
        sudo apt-get install openslide-tools

  install_pips: &install_pips
    run:
      name: Install PyPI dependences
      command: |
        py_ver=$(python -c"import sys; print(sys.version_info.major)")
        if [ $py_ver -eq 2 ]; then
            cp -r requirements-py27.txt requirements.txt ;
        fi
        sudo pip install -U backports.functools_lru_cache  # required for matplotlib @py2
        pip install "setuptools<46" -U  # v46 crashes openslide-python install
        pip install -r requirements.txt --user
        python --version
        pwd ; ls
        pip --version
        pip list

  formatting: &formatting
    run:
      name: Formatting
      command: |
        pip install flake8 -q
        flake8 . --max-line-length=100

  test_coverage: &test_coverage
    run:
      name: Testing and coverage
      command: |
        unset DISPLAY
        sudo pip install -r ./tests/requirements.txt
        mkdir test-reports && mkdir results
        coverage run --source birl -m py.test birl tests bm_dataset bm_experiments bm_ANHIR -v --doctest-modules --junitxml=test-reports/pytest_junit.xml
        coverage report
        codecov
        rm -rf results

  make_docs: &make_docs
   run:
     name: Make Documentation
     command: |
       sudo apt-get install pandoc
       sudo pip install -r docs/requirements.txt
       # sphinx-apidoc -o ./docs/source ./imsegm **/test_* --force --follow-links
       cd docs
       make html --debug --jobs 2 SPHINXOPTS="-W"
       make latexpdf

  run_dataset: &run_dataset
    run:
      name: Dataset
      command: |
        mkdir output
        python bm_dataset/rescale_tissue_images.py -i "./data-images/rat-kidney_/scale-5pc/*.jpg" --scales 5 -ext .png --nb_workers 2
        python bm_dataset/rescale_tissue_landmarks.py -a ./data-images -d ./output --nb_selected 0.5 --nb_total 200
        python bm_dataset/generate_regist_pairs.py -i "./data-images/images/artificial_*.jpg" -l "./data-images/landmarks/artificial_*.csv" -csv ./data-images/cover_artificial.csv --mode each2all
        # python bm_experiments/create_real_synth_dataset.py -i ./data-images/images/Rat_Kidney_HE.jpg -l ./data-images/landmarks/Rat_Kidney_HE.csv -o ./data-images/synth_dataset -nb 3 --nb_workers 1
        # python bm_experiments/generate_regist_pairs.py -i "./data-images/synth_dataset/*.jpg" -l "./data-images/synth_dataset/*.csv" -csv ./data-images/cover_synth-dataset.csv --mode each2all

  run_experiment: &run_experiment
    run:
      name: General experiments
      command: |
        mkdir applications && mkdir results && touch configs/sample_config.yaml
        # python bm_experiments/bm_comp_perform.py  -o ./results -n 1 # reach time-out while running in 36 threads
        python birl/bm_template.py -t ./data-images/pairs-imgs-lnds_mix.csv -o ./results --visual --unique -cfg configs/sample_config.yaml
        rm ./data-images/*_/*/*_HE.csv  # remove target landmarks from histol. tissue
        python birl/bm_template.py -n anhir -t ./data-images/pairs-imgs-lnds_histol.csv -d ./data-images -o ./results --preprocessing matching-rgb gray -cfg configs/sample_config.yaml
        python bm_experiments/evaluate_experiment.py -d ./data-images -e ./results/BmTemplate_anhir --visual
        tree ./results/BmTemplate

  run_bUnwarpJ: &run_bUnwarpJ
    run:
      name: Experiment - bUnwarpJ
      command: |
        wget https://downloads.imagej.net/fiji/archive/20200708-1553/fiji-linux64.zip -O applications/fiji-linux64.zip --progress=bar:force:noscroll
        unzip -q applications/fiji-linux64.zip -d applications/
        rm applications/fiji-linux64.zip
        rm -rf results && mkdir results
        python bm_experiments/bm_bUnwarpJ.py -n mix -t ./data-images/pairs-imgs-lnds_mix.csv -o ./results -Fiji ./applications/Fiji.app/ImageJ-linux64 -cfg ./configs/ImageJ_bUnwarpJ_histol.yaml --preprocessing matching-rgb --visual
        python bm_experiments/bm_bUnwarpJ.py -n anhir -t ./data-images/pairs-imgs-lnds_histol.csv -d ./data-images -o ./results -Fiji ./applications/Fiji.app/ImageJ-linux64 -cfg ./configs/ImageJ_bUnwarpJ-SIFT_histol.yaml --unique
        tree -L 3 ./results
        rm -rf ./applications/Fiji.app
      no_output_timeout: 10m

  run_RVSS: &run_RVSS
    run:
      name: Experiment - RVSS
      command: |
        wget https://downloads.imagej.net/fiji/archive/20200708-1553/fiji-linux64.zip -O applications/fiji-linux64.zip --progress=bar:force:noscroll
        unzip -q applications/fiji-linux64.zip -d applications/
        rm applications/fiji-linux64.zip
        rm -rf results && mkdir results
        python bm_experiments/bm_RVSS.py -t ./data-images/pairs-imgs-lnds_mix.csv -o ./results -Fiji ./applications/Fiji.app/ImageJ-linux64 -cfg ./configs/ImageJ_RVSS_histol.yaml --visual
        tree -L 3 ./results
        rm -rf ./applications/Fiji.app
      no_output_timeout: 10m


jobs:

  Formatting:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - *formatting

  Py3-Tests:
    docker:
      - image: circleci/python:3.6
    steps: &steps_tests
      - checkout
      # INSTALLATION
      - *install_deps
      #- run: git lfs pull
      - *install_pips
      # TESTING
      - *test_coverage

      # PASSING
      - run:
          name: Finalise
          command: |
            python setup.py install --dry-run --user
            coverage report && coverage xml -o test-reports/coverage.xml
      # RESULTS
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  Py3-Experiments:
    docker:
      - image: circleci/python:3.6
    steps: &steps_expts
      - checkout
      # INSTALLATION
      - *install_deps
      #- run: git lfs pull
      - *install_pips
      # EXPERIMENTS
      - *run_dataset
      - *run_experiment
      - *run_bUnwarpJ
      - *run_RVSS

  Py2-Tests:
    docker:
      - image: circleci/python:2.7
    steps: *steps_tests

  Py2-Experiments:
    docker:
      - image: circleci/python:2.7
    steps: *steps_expts

  Build-Docs:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: TexLive
          command: |
            sudo apt-get update -qq
            sudo apt-get install -y imagemagick ghostscript latexmk texlive texlive-latex-recommended texlive-fonts-recommended texlive-formats-extra
      # INSTALLATION
      - *install_pips
      # DOCUMENTATION
      - *make_docs
      # PREVIEW
      - store_artifacts:
          # allows us to preview the generated html pages
          path: docs/build/html/
          destination: html

workflows:
  version: 2
  build:
    jobs:
      - Formatting
      - Py2-Tests
      - Py3-Tests
      - Py2-Experiments
      - Py3-Experiments
      - Build-Docs
